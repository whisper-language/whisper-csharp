//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../whisper-grammar/WhisperLanguage.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class WhisperLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, Println=2, Print=3, Input=4, Assert=5, Size=6, Def=7, If=8, Else=9, 
		Return=10, For=11, While=12, To=13, Do=14, End=15, In=16, Null=17, LABEL_Alias=18, 
		GOTO_Alias=19, JUMP_Alias=20, IMPORT_Alias=21, INCLUDE_Alias=22, Modulus_Alias=23, 
		Class_Alias=24, INTERFACE_Alias=25, EXTEND_Alias=26, BitwiseAnd=27, BitwiseOr=28, 
		BitwiseNot=29, BitwiseNegationOperator=30, LeftShiftOperator=31, RightShiftOperator=32, 
		Or=33, And=34, Equals=35, NEquals=36, GTEquals=37, LTEquals=38, Excl=39, 
		GT=40, LT=41, Add=42, Subtract=43, Multiply=44, Divide=45, Modulus=46, 
		OBrace=47, CBrace=48, OBracket=49, CBracket=50, OParen=51, CParen=52, 
		SColon=53, Assign=54, Comma=55, QMark=56, Colon=57, Bool=58, Number=59, 
		BuildIdentifier=60, Identifier=61, String_Alias=62, Comment=63, Space=64;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_statement = 2, RULE_assignment = 3, 
		RULE_functionCall = 4, RULE_ifStatement = 5, RULE_ifStat = 6, RULE_elseIfStat = 7, 
		RULE_elseStat = 8, RULE_functionDecl = 9, RULE_forStatement = 10, RULE_whileStatement = 11, 
		RULE_idList = 12, RULE_exprList = 13, RULE_expression = 14, RULE_list_Alias = 15, 
		RULE_indexes = 16;
	public static readonly string[] ruleNames = {
		"parse", "block", "statement", "assignment", "functionCall", "ifStatement", 
		"ifStat", "elseIfStat", "elseStat", "functionDecl", "forStatement", "whileStatement", 
		"idList", "exprList", "expression", "list_Alias", "indexes"
	};

	private static readonly string[] _LiteralNames = {
		null, "'**'", "'println'", "'print'", "'input'", "'assert'", "'size'", 
		"'func'", "'if'", "'else'", "'return'", "'for'", "'while'", "'to'", "'do'", 
		"'end'", "'in'", "'null'", "'label'", "'goto'", "'jump'", "'import'", 
		"'include'", "'modulue'", "'class'", "'interface'", "'extend'", "'&'", 
		"'|'", "'^'", "'~'", "'>>'", "'<<'", "'||'", "'&&'", "'=='", "'!='", "'>='", 
		"'<='", "'!'", "'>'", "'<'", "'+'", "'-'", "'*'", "'/'", "'%'", "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "';'", "'='", "','", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Println", "Print", "Input", "Assert", "Size", "Def", "If", 
		"Else", "Return", "For", "While", "To", "Do", "End", "In", "Null", "LABEL_Alias", 
		"GOTO_Alias", "JUMP_Alias", "IMPORT_Alias", "INCLUDE_Alias", "Modulus_Alias", 
		"Class_Alias", "INTERFACE_Alias", "EXTEND_Alias", "BitwiseAnd", "BitwiseOr", 
		"BitwiseNot", "BitwiseNegationOperator", "LeftShiftOperator", "RightShiftOperator", 
		"Or", "And", "Equals", "NEquals", "GTEquals", "LTEquals", "Excl", "GT", 
		"LT", "Add", "Subtract", "Multiply", "Divide", "Modulus", "OBrace", "CBrace", 
		"OBracket", "CBracket", "OParen", "CParen", "SColon", "Assign", "Comma", 
		"QMark", "Colon", "Bool", "Number", "BuildIdentifier", "Identifier", "String_Alias", 
		"Comment", "Space"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WhisperLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WhisperLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WhisperLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WhisperLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(WhisperLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 34;
				block();
				}
				break;
			case 2:
				{
				State = 35;
				statement();
				}
				break;
			}
			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(WhisperLanguageParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(WhisperLanguageParser.SColon, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Println) | (1L << Print) | (1L << Assert) | (1L << Size) | (1L << Def) | (1L << If) | (1L << For) | (1L << While) | (1L << BuildIdentifier) | (1L << Identifier))) != 0)) {
				{
				State = 42;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Println:
				case Print:
				case Assert:
				case Size:
				case If:
				case For:
				case While:
				case BuildIdentifier:
				case Identifier:
					{
					State = 40;
					statement();
					}
					break;
				case Def:
					{
					State = 41;
					functionDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Return) {
				{
				State = 47;
				Match(Return);
				State = 48;
				expression(0);
				State = 49;
				Match(SColon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(WhisperLanguageParser.SColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				assignment();
				State = 54;
				Match(SColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				functionCall();
				State = 57;
				Match(SColon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 61;
				whileStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WhisperLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(WhisperLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(Identifier);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OBracket) {
				{
				State = 65;
				indexes();
				}
			}

			State = 68;
			Match(Assign);
			State = 69;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssertFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assert() { return GetToken(WhisperLanguageParser.Assert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		public AssertFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Size() { return GetToken(WhisperLanguageParser.Size, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		public SizeFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintlnFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Println() { return GetToken(WhisperLanguageParser.Println, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintlnFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintlnFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuildInIdentifierFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BuildIdentifier() { return GetToken(WhisperLanguageParser.BuildIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public BuildInIdentifierFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuildInIdentifierFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WhisperLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public IdentifierFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Print() { return GetToken(WhisperLanguageParser.Print, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		public PrintFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionCall);
		int _la;
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BuildIdentifier:
				_localctx = new BuildInIdentifierFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				Match(BuildIdentifier);
				State = 72;
				Match(OParen);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Println) | (1L << Print) | (1L << Input) | (1L << Assert) | (1L << Size) | (1L << Null) | (1L << Excl) | (1L << Subtract) | (1L << OBracket) | (1L << OParen) | (1L << Bool) | (1L << Number) | (1L << BuildIdentifier) | (1L << Identifier) | (1L << String_Alias))) != 0)) {
					{
					State = 73;
					exprList();
					}
				}

				State = 76;
				Match(CParen);
				}
				break;
			case Identifier:
				_localctx = new IdentifierFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				Match(Identifier);
				State = 78;
				Match(OParen);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Println) | (1L << Print) | (1L << Input) | (1L << Assert) | (1L << Size) | (1L << Null) | (1L << Excl) | (1L << Subtract) | (1L << OBracket) | (1L << OParen) | (1L << Bool) | (1L << Number) | (1L << BuildIdentifier) | (1L << Identifier) | (1L << String_Alias))) != 0)) {
					{
					State = 79;
					exprList();
					}
				}

				State = 82;
				Match(CParen);
				}
				break;
			case Println:
				_localctx = new PrintlnFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				Match(Println);
				State = 84;
				Match(OParen);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Println) | (1L << Print) | (1L << Input) | (1L << Assert) | (1L << Size) | (1L << Null) | (1L << Excl) | (1L << Subtract) | (1L << OBracket) | (1L << OParen) | (1L << Bool) | (1L << Number) | (1L << BuildIdentifier) | (1L << Identifier) | (1L << String_Alias))) != 0)) {
					{
					State = 85;
					expression(0);
					}
				}

				State = 88;
				Match(CParen);
				}
				break;
			case Print:
				_localctx = new PrintFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 89;
				Match(Print);
				State = 90;
				Match(OParen);
				State = 91;
				expression(0);
				State = 92;
				Match(CParen);
				}
				break;
			case Assert:
				_localctx = new AssertFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 94;
				Match(Assert);
				State = 95;
				Match(OParen);
				State = 96;
				expression(0);
				State = 97;
				Match(CParen);
				}
				break;
			case Size:
				_localctx = new SizeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 99;
				Match(Size);
				State = 100;
				Match(OParen);
				State = 101;
				expression(0);
				State = 102;
				Match(CParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext[] elseIfStat() {
			return GetRuleContexts<ElseIfStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext elseIfStat(int i) {
			return GetRuleContext<ElseIfStatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ifStat();
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 107;
					elseIfStat();
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 113;
				elseStat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(WhisperLanguageParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBrace() { return GetToken(WhisperLanguageParser.OBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBrace() { return GetToken(WhisperLanguageParser.CBrace, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(If);
			State = 117;
			expression(0);
			State = 118;
			Match(OBrace);
			State = 119;
			block();
			State = 120;
			Match(CBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(WhisperLanguageParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(WhisperLanguageParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBrace() { return GetToken(WhisperLanguageParser.OBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBrace() { return GetToken(WhisperLanguageParser.CBrace, 0); }
		public ElseIfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatContext elseIfStat() {
		ElseIfStatContext _localctx = new ElseIfStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseIfStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(Else);
			State = 123;
			Match(If);
			State = 124;
			expression(0);
			State = 125;
			Match(OBrace);
			State = 126;
			block();
			State = 127;
			Match(CBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(WhisperLanguageParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBrace() { return GetToken(WhisperLanguageParser.OBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBrace() { return GetToken(WhisperLanguageParser.CBrace, 0); }
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(Else);
			State = 130;
			Match(OBrace);
			State = 131;
			block();
			State = 132;
			Match(CBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Def() { return GetToken(WhisperLanguageParser.Def, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WhisperLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBrace() { return GetToken(WhisperLanguageParser.OBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBrace() { return GetToken(WhisperLanguageParser.CBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(Def);
			State = 135;
			Match(Identifier);
			State = 136;
			Match(OParen);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 137;
				idList();
				}
			}

			State = 140;
			Match(CParen);
			State = 141;
			Match(OBrace);
			State = 142;
			block();
			State = 143;
			Match(CBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(WhisperLanguageParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WhisperLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(WhisperLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(WhisperLanguageParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBrace() { return GetToken(WhisperLanguageParser.OBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBrace() { return GetToken(WhisperLanguageParser.CBrace, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(For);
			State = 146;
			Match(Identifier);
			State = 147;
			Match(Assign);
			State = 148;
			expression(0);
			State = 149;
			Match(To);
			State = 150;
			expression(0);
			State = 151;
			Match(OBrace);
			State = 152;
			block();
			State = 153;
			Match(CBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(WhisperLanguageParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBrace() { return GetToken(WhisperLanguageParser.OBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBrace() { return GetToken(WhisperLanguageParser.CBrace, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(While);
			State = 156;
			expression(0);
			State = 157;
			Match(OBrace);
			State = 158;
			block();
			State = 159;
			Match(CBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(WhisperLanguageParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(WhisperLanguageParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WhisperLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WhisperLanguageParser.Comma, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 24, RULE_idList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(Identifier);
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 162;
				Match(Comma);
				State = 163;
				Match(Identifier);
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WhisperLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WhisperLanguageParser.Comma, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 26, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			expression(0);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 170;
				Match(Comma);
				State = 171;
				expression(0);
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(WhisperLanguageParser.Bool, 0); }
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(WhisperLanguageParser.Number, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WhisperLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Excl() { return GetToken(WhisperLanguageParser.Excl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(WhisperLanguageParser.Or, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(WhisperLanguageParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(WhisperLanguageParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEquals() { return GetToken(WhisperLanguageParser.NEquals, 0); }
		public EqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(WhisperLanguageParser.And, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(WhisperLanguageParser.In, 0); }
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Alias() { return GetToken(WhisperLanguageParser.String_Alias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public ExpressionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(WhisperLanguageParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(WhisperLanguageParser.Subtract, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEquals() { return GetToken(WhisperLanguageParser.GTEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEquals() { return GetToken(WhisperLanguageParser.LTEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(WhisperLanguageParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(WhisperLanguageParser.LT, 0); }
		public CompExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(WhisperLanguageParser.Null, 0); }
		public NullExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(WhisperLanguageParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(WhisperLanguageParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(WhisperLanguageParser.Modulus, 0); }
		public MultExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_AliasContext list_Alias() {
			return GetRuleContext<List_AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public ListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(WhisperLanguageParser.QMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(WhisperLanguageParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Input() { return GetToken(WhisperLanguageParser.Input, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(WhisperLanguageParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(WhisperLanguageParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Alias() { return GetToken(WhisperLanguageParser.String_Alias, 0); }
		public InputExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 178;
				Match(Subtract);
				State = 179;
				expression(20);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				Match(Excl);
				State = 181;
				expression(19);
				}
				break;
			case 3:
				{
				_localctx = new NumberExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				Match(Number);
				}
				break;
			case 4:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183;
				Match(Bool);
				}
				break;
			case 5:
				{
				_localctx = new NullExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184;
				Match(Null);
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185;
				functionCall();
				State = 187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 186;
					indexes();
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new ListExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 189;
				list_Alias();
				State = 191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 190;
					indexes();
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 193;
				Match(Identifier);
				State = 195;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 194;
					indexes();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 197;
				Match(String_Alias);
				State = 199;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 198;
					indexes();
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new ExpressionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 201;
				Match(OParen);
				State = 202;
				expression(0);
				State = 203;
				Match(CParen);
				State = 205;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 204;
					indexes();
					}
					break;
				}
				}
				break;
			case 11:
				{
				_localctx = new InputExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207;
				Match(Input);
				State = 208;
				Match(OParen);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==String_Alias) {
					{
					State = 209;
					Match(String_Alias);
					}
				}

				State = 212;
				Match(CParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 247;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 245;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 216;
						Match(T__0);
						State = 217;
						expression(18);
						}
						break;
					case 2:
						{
						_localctx = new MultExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 218;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 219;
						((MultExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
							((MultExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 220;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 222;
						((AddExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Subtract) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 223;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new CompExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 225;
						((CompExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTEquals) | (1L << LTEquals) | (1L << GT) | (1L << LT))) != 0)) ) {
							((CompExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 226;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new EqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 227;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 228;
						((EqExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NEquals) ) {
							((EqExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 229;
						expression(15);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 230;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 231;
						Match(And);
						State = 232;
						expression(14);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 233;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 234;
						Match(Or);
						State = 235;
						expression(13);
						}
						break;
					case 8:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 236;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 237;
						Match(QMark);
						State = 238;
						expression(0);
						State = 239;
						Match(Colon);
						State = 240;
						expression(12);
						}
						break;
					case 9:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 242;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 243;
						Match(In);
						State = 244;
						expression(11);
						}
						break;
					}
					} 
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class List_AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBracket() { return GetToken(WhisperLanguageParser.OBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBracket() { return GetToken(WhisperLanguageParser.CBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public List_AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_Alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_Alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_AliasContext list_Alias() {
		List_AliasContext _localctx = new List_AliasContext(Context, State);
		EnterRule(_localctx, 30, RULE_list_Alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(OBracket);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Println) | (1L << Print) | (1L << Input) | (1L << Assert) | (1L << Size) | (1L << Null) | (1L << Excl) | (1L << Subtract) | (1L << OBracket) | (1L << OParen) | (1L << Bool) | (1L << Number) | (1L << BuildIdentifier) | (1L << Identifier) | (1L << String_Alias))) != 0)) {
				{
				State = 251;
				exprList();
				}
			}

			State = 254;
			Match(CBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OBracket() { return GetTokens(WhisperLanguageParser.OBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBracket(int i) {
			return GetToken(WhisperLanguageParser.OBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CBracket() { return GetTokens(WhisperLanguageParser.CBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBracket(int i) {
			return GetToken(WhisperLanguageParser.CBracket, i);
		}
		public IndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWhisperLanguageVisitor<TResult> typedVisitor = visitor as IWhisperLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexesContext indexes() {
		IndexesContext _localctx = new IndexesContext(Context, State);
		EnterRule(_localctx, 32, RULE_indexes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 256;
					Match(OBracket);
					State = 257;
					expression(0);
					State = 258;
					Match(CBracket);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\x10B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\'', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '-', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x30', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x41', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x45', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'M', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'S', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'Y', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'k', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', 'o', '\n', '\a', '\f', '\a', '\xE', '\a', 'r', '\v', '\a', '\x3', 
		'\a', '\x5', '\a', 'u', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x8D', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xA7', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xAA', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xAF', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB2', '\v', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xBE', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xC2', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xC6', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xCA', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xD0', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xD5', '\n', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xD8', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xF8', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xFB', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xFF', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x6', '\x12', '\x107', 
		'\n', '\x12', '\r', '\x12', '\xE', '\x12', '\x108', '\x3', '\x12', '\x2', 
		'\x3', '\x1E', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', 
		'\x6', '\x3', '\x2', '.', '\x30', '\x3', '\x2', ',', '-', '\x4', '\x2', 
		'\'', '(', '*', '+', '\x3', '\x2', '%', '&', '\x2', '\x12A', '\x2', '&', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'@', '\x3', '\x2', '\x2', '\x2', '\b', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'j', '\x3', '\x2', '\x2', '\x2', '\f', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'v', '\x3', '\x2', '\x2', '\x2', '\x10', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x83', '\x3', '\x2', '\x2', '\x2', '\x14', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xFC', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '$', '\'', '\x5', '\x4', '\x3', '\x2', 
		'%', '\'', '\x5', '\x6', '\x4', '\x2', '&', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', 
		'\x2', '\x2', '(', ')', '\a', '\x2', '\x2', '\x3', ')', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '*', '-', '\x5', '\x6', '\x4', '\x2', '+', '-', '\x5', 
		'\x14', '\v', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '+', '\x3', 
		'\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', ',', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\f', '\x2', '\x2', '\x32', '\x33', '\x5', 
		'\x1E', '\x10', '\x2', '\x33', '\x34', '\a', '\x37', '\x2', '\x2', '\x34', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x5', '\b', '\x5', '\x2', '\x38', 
		'\x39', '\a', '\x37', '\x2', '\x2', '\x39', '\x41', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\x5', '\n', '\x6', '\x2', ';', '<', '\a', '\x37', '\x2', 
		'\x2', '<', '\x41', '\x3', '\x2', '\x2', '\x2', '=', '\x41', '\x5', '\f', 
		'\a', '\x2', '>', '\x41', '\x5', '\x16', '\f', '\x2', '?', '\x41', '\x5', 
		'\x18', '\r', '\x2', '@', '\x37', '\x3', '\x2', '\x2', '\x2', '@', ':', 
		'\x3', '\x2', '\x2', '\x2', '@', '=', '\x3', '\x2', '\x2', '\x2', '@', 
		'>', '\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\a', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\a', '?', '\x2', 
		'\x2', '\x43', '\x45', '\x5', '\"', '\x12', '\x2', '\x44', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x38', '\x2', 
		'\x2', 'G', 'H', '\x5', '\x1E', '\x10', '\x2', 'H', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\a', '>', '\x2', '\x2', 'J', 'L', '\a', '\x35', 
		'\x2', '\x2', 'K', 'M', '\x5', '\x1C', '\xF', '\x2', 'L', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'k', '\a', '\x36', '\x2', '\x2', 'O', 'P', '\a', 
		'?', '\x2', '\x2', 'P', 'R', '\a', '\x35', '\x2', '\x2', 'Q', 'S', '\x5', 
		'\x1C', '\xF', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'R', 'S', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 
		'k', '\a', '\x36', '\x2', '\x2', 'U', 'V', '\a', '\x4', '\x2', '\x2', 
		'V', 'X', '\a', '\x35', '\x2', '\x2', 'W', 'Y', '\x5', '\x1E', '\x10', 
		'\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', 'k', '\a', '\x36', '\x2', 
		'\x2', '[', '\\', '\a', '\x5', '\x2', '\x2', '\\', ']', '\a', '\x35', 
		'\x2', '\x2', ']', '^', '\x5', '\x1E', '\x10', '\x2', '^', '_', '\a', 
		'\x36', '\x2', '\x2', '_', 'k', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\a', '\a', '\x2', '\x2', '\x61', '\x62', '\a', '\x35', '\x2', '\x2', 
		'\x62', '\x63', '\x5', '\x1E', '\x10', '\x2', '\x63', '\x64', '\a', '\x36', 
		'\x2', '\x2', '\x64', 'k', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\b', '\x2', '\x2', '\x66', 'g', '\a', '\x35', '\x2', '\x2', 'g', 
		'h', '\x5', '\x1E', '\x10', '\x2', 'h', 'i', '\a', '\x36', '\x2', '\x2', 
		'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 'I', '\x3', '\x2', '\x2', '\x2', 
		'j', 'O', '\x3', '\x2', '\x2', '\x2', 'j', 'U', '\x3', '\x2', '\x2', '\x2', 
		'j', '[', '\x3', '\x2', '\x2', '\x2', 'j', '`', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x65', '\x3', '\x2', '\x2', '\x2', 'k', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'p', '\x5', '\xE', '\b', '\x2', 'm', 'o', '\x5', '\x10', '\t', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 's', 'u', '\x5', '\x12', '\n', '\x2', 't', 's', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\a', '\n', '\x2', '\x2', 'w', 'x', '\x5', '\x1E', 
		'\x10', '\x2', 'x', 'y', '\a', '\x31', '\x2', '\x2', 'y', 'z', '\x5', 
		'\x4', '\x3', '\x2', 'z', '{', '\a', '\x32', '\x2', '\x2', '{', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\v', '\x2', '\x2', '}', '~', 
		'\a', '\n', '\x2', '\x2', '~', '\x7F', '\x5', '\x1E', '\x10', '\x2', '\x7F', 
		'\x80', '\a', '\x31', '\x2', '\x2', '\x80', '\x81', '\x5', '\x4', '\x3', 
		'\x2', '\x81', '\x82', '\a', '\x32', '\x2', '\x2', '\x82', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\v', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\x31', '\x2', '\x2', '\x85', '\x86', '\x5', '\x4', '\x3', 
		'\x2', '\x86', '\x87', '\a', '\x32', '\x2', '\x2', '\x87', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\t', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '?', '\x2', '\x2', '\x8A', '\x8C', '\a', '\x35', '\x2', 
		'\x2', '\x8B', '\x8D', '\x5', '\x1A', '\xE', '\x2', '\x8C', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x36', '\x2', 
		'\x2', '\x8F', '\x90', '\a', '\x31', '\x2', '\x2', '\x90', '\x91', '\x5', 
		'\x4', '\x3', '\x2', '\x91', '\x92', '\a', '\x32', '\x2', '\x2', '\x92', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\r', '\x2', 
		'\x2', '\x94', '\x95', '\a', '?', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x38', '\x2', '\x2', '\x96', '\x97', '\x5', '\x1E', '\x10', '\x2', '\x97', 
		'\x98', '\a', '\xF', '\x2', '\x2', '\x98', '\x99', '\x5', '\x1E', '\x10', 
		'\x2', '\x99', '\x9A', '\a', '\x31', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\x4', '\x3', '\x2', '\x9B', '\x9C', '\a', '\x32', '\x2', '\x2', '\x9C', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\xE', '\x2', 
		'\x2', '\x9E', '\x9F', '\x5', '\x1E', '\x10', '\x2', '\x9F', '\xA0', '\a', 
		'\x31', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\x4', '\x3', '\x2', '\xA1', 
		'\xA2', '\a', '\x32', '\x2', '\x2', '\xA2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA8', '\a', '?', '\x2', '\x2', '\xA4', '\xA5', '\a', 
		'\x39', '\x2', '\x2', '\xA5', '\xA7', '\a', '?', '\x2', '\x2', '\xA6', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB0', '\x5', '\x1E', '\x10', 
		'\x2', '\xAC', '\xAD', '\a', '\x39', '\x2', '\x2', '\xAD', '\xAF', '\x5', 
		'\x1E', '\x10', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\b', '\x10', '\x1', '\x2', '\xB4', '\xB5', '\a', '-', '\x2', 
		'\x2', '\xB5', '\xD8', '\x5', '\x1E', '\x10', '\x16', '\xB6', '\xB7', 
		'\a', ')', '\x2', '\x2', '\xB7', '\xD8', '\x5', '\x1E', '\x10', '\x15', 
		'\xB8', '\xD8', '\a', '=', '\x2', '\x2', '\xB9', '\xD8', '\a', '<', '\x2', 
		'\x2', '\xBA', '\xD8', '\a', '\x13', '\x2', '\x2', '\xBB', '\xBD', '\x5', 
		'\n', '\x6', '\x2', '\xBC', '\xBE', '\x5', '\"', '\x12', '\x2', '\xBD', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', '\x5', 
		' ', '\x11', '\x2', '\xC0', '\xC2', '\x5', '\"', '\x12', '\x2', '\xC1', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\a', 
		'?', '\x2', '\x2', '\xC4', '\xC6', '\x5', '\"', '\x12', '\x2', '\xC5', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\a', 
		'@', '\x2', '\x2', '\xC8', '\xCA', '\x5', '\"', '\x12', '\x2', '\xC9', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', 
		'\x35', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xCD', 
		'\xCF', '\a', '\x36', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\"', '\x12', 
		'\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x6', '\x2', '\x2', '\xD2', '\xD4', '\a', '\x35', '\x2', 
		'\x2', '\xD3', '\xD5', '\a', '@', '\x2', '\x2', '\xD4', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD8', '\a', '\x36', '\x2', 
		'\x2', '\xD7', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\f', '\x14', '\x2', '\x2', '\xDA', 
		'\xDB', '\a', '\x3', '\x2', '\x2', '\xDB', '\xF8', '\x5', '\x1E', '\x10', 
		'\x14', '\xDC', '\xDD', '\f', '\x13', '\x2', '\x2', '\xDD', '\xDE', '\t', 
		'\x2', '\x2', '\x2', '\xDE', '\xF8', '\x5', '\x1E', '\x10', '\x14', '\xDF', 
		'\xE0', '\f', '\x12', '\x2', '\x2', '\xE0', '\xE1', '\t', '\x3', '\x2', 
		'\x2', '\xE1', '\xF8', '\x5', '\x1E', '\x10', '\x13', '\xE2', '\xE3', 
		'\f', '\x11', '\x2', '\x2', '\xE3', '\xE4', '\t', '\x4', '\x2', '\x2', 
		'\xE4', '\xF8', '\x5', '\x1E', '\x10', '\x12', '\xE5', '\xE6', '\f', '\x10', 
		'\x2', '\x2', '\xE6', '\xE7', '\t', '\x5', '\x2', '\x2', '\xE7', '\xF8', 
		'\x5', '\x1E', '\x10', '\x11', '\xE8', '\xE9', '\f', '\xF', '\x2', '\x2', 
		'\xE9', '\xEA', '\a', '$', '\x2', '\x2', '\xEA', '\xF8', '\x5', '\x1E', 
		'\x10', '\x10', '\xEB', '\xEC', '\f', '\xE', '\x2', '\x2', '\xEC', '\xED', 
		'\a', '#', '\x2', '\x2', '\xED', '\xF8', '\x5', '\x1E', '\x10', '\xF', 
		'\xEE', '\xEF', '\f', '\r', '\x2', '\x2', '\xEF', '\xF0', '\a', ':', '\x2', 
		'\x2', '\xF0', '\xF1', '\x5', '\x1E', '\x10', '\x2', '\xF1', '\xF2', '\a', 
		';', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x1E', '\x10', '\xE', '\xF3', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\f', '\f', '\x2', 
		'\x2', '\xF5', '\xF6', '\a', '\x12', '\x2', '\x2', '\xF6', '\xF8', '\x5', 
		'\x1E', '\x10', '\r', '\xF7', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', 
		'\x33', '\x2', '\x2', '\xFD', '\xFF', '\x5', '\x1C', '\xF', '\x2', '\xFE', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\a', '\x34', '\x2', '\x2', '\x101', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\a', '\x33', '\x2', '\x2', '\x103', '\x104', '\x5', 
		'\x1E', '\x10', '\x2', '\x104', '\x105', '\a', '\x34', '\x2', '\x2', '\x105', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '#', '\x3', '\x2', '\x2', '\x2', '\x1C', '&', ',', '.', '\x35', 
		'@', '\x44', 'L', 'R', 'X', 'j', 'p', 't', '\x8C', '\xA8', '\xB0', '\xBD', 
		'\xC1', '\xC5', '\xC9', '\xCF', '\xD4', '\xD7', '\xF7', '\xF9', '\xFE', 
		'\x108',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
