//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./TL.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TLParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface ITLListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParse([NotNull] TLParser.ParseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParse([NotNull] TLParser.ParseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] TLParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] TLParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] TLParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] TLParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] TLParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] TLParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>buildInIdentifierFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBuildInIdentifierFunctionCall([NotNull] TLParser.BuildInIdentifierFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>buildInIdentifierFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBuildInIdentifierFunctionCall([NotNull] TLParser.BuildInIdentifierFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierFunctionCall([NotNull] TLParser.IdentifierFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierFunctionCall([NotNull] TLParser.IdentifierFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>printlnFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintlnFunctionCall([NotNull] TLParser.PrintlnFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printlnFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintlnFunctionCall([NotNull] TLParser.PrintlnFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>printFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintFunctionCall([NotNull] TLParser.PrintFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintFunctionCall([NotNull] TLParser.PrintFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assertFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertFunctionCall([NotNull] TLParser.AssertFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assertFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertFunctionCall([NotNull] TLParser.AssertFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>sizeFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeFunctionCall([NotNull] TLParser.SizeFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>sizeFunctionCall</c>
	/// labeled alternative in <see cref="TLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeFunctionCall([NotNull] TLParser.SizeFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] TLParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] TLParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.ifStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStat([NotNull] TLParser.IfStatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.ifStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStat([NotNull] TLParser.IfStatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.elseIfStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStat([NotNull] TLParser.ElseIfStatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.elseIfStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStat([NotNull] TLParser.ElseIfStatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.elseStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStat([NotNull] TLParser.ElseStatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.elseStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStat([NotNull] TLParser.ElseStatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDecl([NotNull] TLParser.FunctionDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDecl([NotNull] TLParser.FunctionDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] TLParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] TLParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] TLParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] TLParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.idList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdList([NotNull] TLParser.IdListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.idList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdList([NotNull] TLParser.IdListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprList([NotNull] TLParser.ExprListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprList([NotNull] TLParser.ExprListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpression([NotNull] TLParser.BoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpression([NotNull] TLParser.BoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpression([NotNull] TLParser.NumberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpression([NotNull] TLParser.NumberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] TLParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] TLParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] TLParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] TLParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] TLParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] TLParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] TLParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] TLParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowerExpression([NotNull] TLParser.PowerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowerExpression([NotNull] TLParser.PowerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqExpression([NotNull] TLParser.EqExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqExpression([NotNull] TLParser.EqExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] TLParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] TLParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>inExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] TLParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>inExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] TLParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpression([NotNull] TLParser.StringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpression([NotNull] TLParser.StringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionExpression([NotNull] TLParser.ExpressionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionExpression([NotNull] TLParser.ExpressionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] TLParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] TLParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>compExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompExpression([NotNull] TLParser.CompExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>compExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompExpression([NotNull] TLParser.CompExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullExpression([NotNull] TLParser.NullExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullExpression([NotNull] TLParser.NullExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] TLParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] TLParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultExpression([NotNull] TLParser.MultExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultExpression([NotNull] TLParser.MultExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>listExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListExpression([NotNull] TLParser.ListExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>listExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListExpression([NotNull] TLParser.ListExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] TLParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] TLParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>inputExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputExpression([NotNull] TLParser.InputExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>inputExpression</c>
	/// labeled alternative in <see cref="TLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputExpression([NotNull] TLParser.InputExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList([NotNull] TLParser.ListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList([NotNull] TLParser.ListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLParser.indexes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexes([NotNull] TLParser.IndexesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLParser.indexes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexes([NotNull] TLParser.IndexesContext context);
}
